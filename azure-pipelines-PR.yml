# CI and PR triggers
trigger:
  branches:
    include:
    - main
    - dev16.1
    - feature/*
    - release/*
  paths:
    include:
    - '*'
    exclude:
    - .github/*
    - docs/*
    - .vscode/*
    - .devcontainer/*
    - tests/scripts/
    - attributions.md
    - CODE_OF_CONDUCT.md
    - DEVGUIDE.md
    - INTERNAL.md
    - Language-Version-History.md
    - License.txt
    - README.md
    - release-notes.md
    - TESTGUIDE.md

pr:
  branches:
    include:
    - main
    - dev16.1
    - feature/*
    - release/*
  paths:
    include:
    - '*'
    exclude:
    - .github/*
    - docs/*
    - attributions.md
    - CODE_OF_CONDUCT.md
    - DEVGUIDE.md
    - INTERNAL.md
    - Language-Version-History.md
    - License.txt
    - README.md
    - release-notes.md
    - TESTGUIDE.md

variables:
  - name: _TeamName
    value: FSharp
  - name: _BuildConfig
    value: Release
  - name: _PublishUsingPipelines
    value: true
  - name: VisualStudioDropName
    value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)
  - name: Codeql.Enabled
    value: true
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - group: DotNet-FSharp-SDLValidation-Params
  - ${{ if and(eq(variables['System.TeamProject'], 'public'), eq(variables['Build.Reason'], 'PullRequest')) }}:
    - name: RunningAsPullRequest
      value: true
  # Pick up pool provider name behavior from shared yaml template
  - template: /eng/common/templates/variables/pool-providers.yml

# Variables defined in yml cannot be overridden at queue time; instead overridable variables must be defined in the web UI.
# Commenting out until something like this is supported: https://github.com/Microsoft/azure-pipelines-yaml/pull/129
#variables:
#- name: SkipTests
#  defaultValue: false

stages:
- stage: build
  displayName: Build
  jobs:

  #-------------------------------------------------------------------------------------------------------------------#
  #                            PR builds without logs publishing                                                      #
  #-------------------------------------------------------------------------------------------------------------------#
  - ${{ if eq(variables['System.TeamProject'], 'public') }}:
    - template: /eng/common/templates/jobs/jobs.yml
      parameters:
        enableMicrobuild: false
        enablePublishBuildArtifacts: false
        enablePublishTestResults: false
        enablePublishBuildAssets: false
        enablePublishUsingPipelines: $(_PublishUsingPipelines)
        enableSourceBuild: false
        enableTelemetry: true
        helixRepo: dotnet/fsharp
        jobs:
          # Determinism, we want to run it only in PR builds
        - job: Determinism_Debug
          condition: eq(variables['Build.Reason'], 'PullRequest')
          variables:
          - name: _SignType
            value: Test
          pool:
            name: $(DncEngPublicBuildPool)
            demands: ImageOverride -equals $(WindowsMachineQueueName)
          timeoutInMinutes: 90
          strategy:
            maxParallel: 2
            matrix:
              regular:
                _experimental_flag: ''
              experimental_features:
                _experimental_flag: ''
          steps:
          - checkout: self
            clean: true
          - task: UseDotNet@2
            displayName: install SDK
            inputs:
              packageType: sdk
              useGlobalJson: true
              includePreviewVersions: false
              workingDirectory: $(Build.SourcesDirectory)
              installationPath: $(Build.SourcesDirectory)/.dotnet
          - script: .\eng\test-determinism.cmd -configuration Debug
            env:
              FSHARP_EXPERIMENTAL_FEATURES: $(_experimental_flag)
            displayName: Determinism tests with Debug configuration
          - task: PublishPipelineArtifact@1
            displayName: Publish Determinism Logs
            inputs:
              targetPath: '$(Build.SourcesDirectory)/artifacts/log/Debug'
              artifactName: 'Determinism_Debug Attempt $(System.JobAttempt) Logs'
            continueOnError: true
            condition: not(succeeded())

          # Check FSComp.txt error code sorting and code formatting
        - job: CheckCodeFormatting
          pool:
            vmImage: $(UbuntuMachineQueueName)
          steps:
          - checkout: self
            clean: true
          - script: dotnet --list-sdks
            displayName: Report dotnet SDK versions
          - task: UseDotNet@2
            displayName: install SDK
            inputs:
              packageType: sdk
              useGlobalJson: true
              includePreviewVersions: true
              workingDirectory: $(Build.SourcesDirectory)
              installationPath: $(Agent.ToolsDirectory)/dotnet
          - script: dotnet tool restore
            env:
              DOTNET_ROLL_FORWARD_TO_PRERELEASE: 1
            displayName: Install tools
          - script: dotnet fsi src/Compiler/FSCompCheck.fsx
            env:
              DOTNET_ROLL_FORWARD_TO_PRERELEASE: 1
            displayName: Check error code sorting in src/Compiler/FSComp.txt
          - script: dotnet fantomas . --check
            env:
              DOTNET_ROLL_FORWARD_TO_PRERELEASE: 1
            displayName: Check code formatting (run 'dotnet fantomas .' to fix)

        # Check whether package with current version has been published to nuget.org
        # We will try to restore both FSharp.Core and FCS and if restore is _successful_, package version needs to be bumped.
        # NOTE: The check now runs on all branches (not just release),
        #       because we want to catch cases when version is desynched and we didn't update it.
        #       It is also helping the release notes automation to be up to date with packages versions.
        - job: Check_Published_Package_Versions
          pool:
            vmImage: $(UbuntuMachineQueueName)
          strategy:
            maxParallel: 2
            matrix:
              FCS:
                _project: "FSharp.Compiler.Service_notshipped.fsproj"
              FSCore:
                _project: "FSharp.Core_notshipped.fsproj"
          steps:
          - checkout: self
            clean: true
          - task: UseDotNet@2
            displayName: install SDK
            inputs:
              packageType: sdk
              useGlobalJson: true
              includePreviewVersions: true
              workingDirectory: $(Build.SourcesDirectory)
              installationPath: $(Agent.ToolsDirectory)/dotnet
          - pwsh: ./check.ps1 -project $(_project)
            workingDirectory: $(Build.SourcesDirectory)/buildtools/checkpackages
            env:
                DOTNET_ROLL_FORWARD_TO_PRERELEASE: 1
            displayName: Check published package version


  #-------------------------------------------------------------------------------------------------------------------#
  #                                                    PR builds                                                      #
  #-------------------------------------------------------------------------------------------------------------------#
  - ${{ if eq(variables['System.TeamProject'], 'public') }}:
    - template: /eng/common/templates/jobs/jobs.yml
      parameters:
        enableMicrobuild: true
        enablePublishBuildArtifacts: true
        enablePublishTestResults: false
        enablePublishBuildAssets: true
        enablePublishUsingPipelines: $(_PublishUsingPipelines)
        enableSourceBuild: true
        enableTelemetry: true
        helixRepo: dotnet/fsharp
        jobs:


        # Plain FCS build Windows
        - job: TomasTestingWithTests
          strategy:
            parallel: 7
          pool:
            name: $(DncEngPublicBuildPool)
            demands: ImageOverride -equals $(WindowsMachineQueueName)
          variables:
          - name: _BuildConfig
            value: Debug
          steps:
          - checkout: self
            clean: true
          - script: dotnet --list-sdks
            displayName: Report dotnet SDK versions
          - task: UseDotNet@2
            displayName: install SDK
            inputs:
              packageType: sdk
              useGlobalJson: true
              includePreviewVersions: true
              workingDirectory: $(Build.SourcesDirectory)
              installationPath: $(Agent.ToolsDirectory)/dotnet
          - script: dotnet build .\tests\tests.fsproj /bl:\"artifacts/log/$(_BuildConfig)/TestPlaygroundRebuild.binlog\"
            workingDirectory: $(Build.SourcesDirectory)
            displayName: Build dummy test project
            continueOnError: false
            condition: always()
          - task: VSTest@2
            displayName: Run tests
            inputs:
              testSelector: testAssemblies
              testAssemblyVer2: |
                **\*Tests.dll
                !**\obj\**
              runInParallel: False # This disables multi-threaded test runs
              distributionBatchType: basedOnExecutionTime
              configuration: '$(BuildConfiguration)'
              diagnosticsEnabled: true
              continueOnError: true